'''
 Project: MPG Desktop Application
 Module:  database.py
 
 Description: 
 This module defines the database for the Gas DEsktop Application.
The database schema is

Gas Fillup Entry 
   [0] RecordID: <<auto-generated>>
   [1] Date: yyyy/mm/dd
   [2] Gallons: xx.xxx
   [3] Mileage: xxxxx.x  (miles)
   [4] Price:   xx.xx   (US Dollars)
   [5] Station:  <<text>>
   [6] Notes:    <<text>> 
 
 Name          Date     Issue   
 R. Gaisey   11/1/23

 '''

import datetime
import xml.etree.ElementTree as ET
from enum import IntEnum


class EntryTags(IntEnum):
   RECORDID = 0
   DATE     = 1
   GALLONS  = 2
   MILEAGE  = 3
   PRICE    = 4
   STATION  = 5
   NOTES    = 6

class DataBase:
    def __init__(self, filename):
        print("Hello Database")
        self.filename = filename
        self.Entries = []
        self.import_xml(filename)
        self.save_xml_to_list()



    def import_xml (self, xmlfile):

        self.tree = ET.parse(xmlfile) 
        self.tree.write("gas_raw1.xml", encoding="utf-8")  



    def save_xml_to_list (self):

        # get root element 
        root = self.tree.getroot() 
    
        entries = []
        row  = []

        for child in root: 
            row  = []

            for elements in child:
                row.append(elements.text)
            self.Entries.append(row)

        
       # for x in range(45):
       #     print (f' New row {self.Entries[x][3]} \n\n')


        #for entry in entries:
        #    print (f' New row {entry} \n\n')



    def add_entry (self, date, gallons, mileage, station, notes):
            
        newID = self.get_new_RecordID
        row  = [newID, date, gallons, mileage, station, notes]
        self.Entries.append(row)



    def print_entries(self):
        # iterate news items 
        root = self.tree.getroot() 
        for child in root: 
            for elements in child:
                print (f' {elements.tag}: {elements.text} ')

            print('\n\n')


    def get_new_RecordID(self):
        root = self.tree.getroot() 

        maxRecordID = 0
        for entry in root.findall('row'):
           currID = int(entry.find('RecordID').text)
           if currID > maxRecordID: 
              maxRecordID = currID

        return (maxRecordID + 1)
    

    @staticmethod
    def get_date():
        return str(datetime.datetime.now()).split(" ")[0]



'''

    def get_entry_by_price(self, price1, op, price2=0):
        
        for row in root.findall("./row/PRICE"):
            price = float(row.find('PRICE').text)
            if op == "less":

            elif op == "more":

            elif op == "between":
        


   def save_xml (self, xmlfile):

        self.tree = ET.parse(xmlfile) 
    
        # get root element 
        root = self.tree.getroot() 
    
        
        # Add a RecordID to all entry rows 
        newID = 0
        rowRootTag = ET.Element("RecordID")

        for child in root: 
            newChildTag = ET.SubElement(rowRootTag, "RecordID")
            newChildTag.text = str(newID)   
            child.insert(0, newChildTag) 

            newID+=1

        self.tree.write("gas_raw1.xml", encoding="utf-8")  

        

    
    def get_entry_by_price(self, price, op):
        if email in self.users:
            return self.users[email]
        else:
            return -1


    def get_entry_by_station(self, station, op):
        return -1


    
        
'''