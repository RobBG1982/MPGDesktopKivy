'''
 Project: MPG Desktop Application
 Module:  database.py
 
 Description: 
 This module defines the database for the Gas Desktop Application.
The database schema is

Gas Fillup Entry 
   [0] RecordID: <<auto-generated>>
   [1] Date: yyyy/mm/dd
   [2] Gallons: xx.xxx
   [3] Mileage: xxxxx.x  (miles)
   [4] Price:   xx.xx   (US Dollars)
   [5] Station:  <<text>>
   [6] Notes:    <<text>> 
 
 Name          Date       Issue   
 R. Gaisey   11/01/23   initial commit
 R. Gaisey   11/18/23   file save function
 R. Gaisey   12/04/23   xml conversion, updated size func
              cont.     added xml attribute update
 '''

import datetime
import xml.etree.ElementTree as ET
from enum import IntEnum


class EntryTags(IntEnum):
   RECORDID = 0
   DATE     = 1
   GALLONS  = 2
   MILEAGE  = 3
   PRICE    = 4
   STATION  = 5
   NOTES    = 6

class DataBase:

    def __init__(self, filename):
        '''
        Initializer function
        
        Parameters:
           filename(text): filename of gas values source 
        Returns:None
        '''

        self.filename = filename
        self.Entries = []
        self.tree = None
        self.root = None
        self.backupFile = "liveBackup.xml"

        self.save_xml_to_list(filename)
        self.save_tree_to_file(False)
        #self.print_entries()


    def get_size (self):
        '''
        Returns the nummber of entries in the database
        
        Parameters:
           None
        Returns:
         length(int) - the number of elements in the database
        '''

        return  len(self.root) 
         

    def save_xml_to_list (self, xmlfile):
        '''
        Converts an xml file into a single array
        Each array entry is a 1st level child element of the xml root
        Each entry will contain all of the children of that 1st level child
      
        Parameters:
           xmlfile(string) - filename of the source xml file
        Returns:
           None
        '''

        self.tree = ET.parse(xmlfile) 

        # get root element 
        self.root = self.tree.getroot() 

        for child in self.root: 

            row  = []
            for elements in child:
                row.append(elements.text)
            self.Entries.append(row)


    def save_tree_to_file (self, replace):
        '''
        Saves an xml tree object to an .xml file
      
        Parameters:
           replace (bool) - If this is true, also replaces the source file with 
           the backup file created 
        Returns:
           None
        '''

        ET.indent(self.tree,space="\t", level=0)
        self.tree.write(self.backupFile, encoding="utf-8") 


        if replace:
            self.tree.write(self.filename, encoding="utf-8") 
            



    def add_entry (self, date, gallons, mileage, cost, station, notes):
        '''
        Add a gas mileage entry into the database
      
        Parameters:
           date,gallons, mileage, cost, station, notes  - entry data 
        Returns:
           None
        '''

        row = ET.SubElement(self.root,'row')

        newElem= ET.SubElement(row,  'RecordID')
        newElem.text = str(self.get_new_RecordID())

        newElem = ET.SubElement(row,  'DATE')
        newElem.text = str(date)

        newElem = ET.SubElement(row,  'GALLONS')
        newElem.text = str(gallons)

        newElem = ET.SubElement(row,  'MILEAGE')
        newElem.text = str(mileage)

        newElem = ET.SubElement(row,  'PRICE')
        newElem.text = str(cost)

        newElem = ET.SubElement(row,  'STATION')
        newElem.text = station

        newElem = ET.SubElement(row,  'NOTES')
        newElem.text = notes

        self.print_entries()

        self.root.set('count',str(len(self.root)))
        self.root.set('lastEntry',date)
        self.root.set('lastUpdated',str(datetime.date.today()))
        self.save_tree_to_file(False)



    def print_entries(self):
        '''
        Prints all entries in the database
      
        Parameters:
           None
        Returns:
           None
        '''
        
        for child in self.root: 
            for elements in child:
                print (f' {elements.tag}: {elements.text} ')

            print('\n\n')


    def get_new_RecordID(self):
        '''
        gets a new recordID for a new entry
      
        Parameters:
           None
        Returns:
           None
        '''

        root = self.tree.getroot() 

        maxRecordID = 0
        for entry in root.findall('row'):
           try:
             currID = int(entry.find('RecordID').text)
             if currID > maxRecordID: 
                 maxRecordID = currID
           except:
             return (maxRecordID+1)

       
        return (maxRecordID + 1)
    

    @staticmethod
    def get_date():
        return str(datetime.datetime.now()).split(" ")[0]


'''

if __name__=="__main__":
    db = DataBase("utilities/gas_raw.xml")
    db.print_entries()
        
'''